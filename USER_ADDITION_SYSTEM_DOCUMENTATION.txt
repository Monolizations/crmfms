USER ADDITION SYSTEM DOCUMENTATION
=====================================

CRM/FMS Application - User Management System Analysis
====================================================

OVERVIEW
--------
The system implements a role-based access control (RBAC) system for user management 
with multiple entry points and security layers. Users can be added through the 
faculties management interface with different permission levels based on their roles.

DATABASE SCHEMA & STRUCTURE
===========================

Core Tables:
- users: Stores basic user information
  * user_id (Primary Key, Auto Increment)
  * employee_id (VARCHAR(50), UNIQUE, NOT NULL)
  * first_name (VARCHAR(100), NOT NULL)
  * last_name (VARCHAR(100), NOT NULL)
  * email (VARCHAR(255), UNIQUE, NOT NULL)
  * password_hash (VARCHAR(255), NOT NULL)
  * status (ENUM('active', 'inactive'), DEFAULT 'active')
  * created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP)
  * updated_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)

- roles: Defines available roles
  * role_id (Primary Key, Auto Increment)
  * role_name (VARCHAR(50), UNIQUE, NOT NULL)
  Available roles: admin, dean, secretary, program head, faculty, staff

- user_roles: Junction table linking users to their roles
  * user_id (Foreign Key to users.user_id)
  * role_id (Foreign Key to roles.role_id)
  * Primary Key: (user_id, role_id)

Key Features:
- Password hashing using PHP's password_hash() with PASSWORD_DEFAULT
- Unique constraints on employee_id and email
- Status tracking (active/inactive)
- Audit trail support
- Many-to-many relationship for flexible role assignments

API ENDPOINTS FOR USER MANAGEMENT
=================================

PRIMARY ENDPOINT: /api/faculties/faculties.php
------------------------------------------------

GET Requests:
- Retrieves all users with their roles and QR codes
- Joins users, user_roles, roles, and qr_codes tables
- Returns comprehensive user data including role information
- Query: SELECT u.user_id, u.employee_id, u.first_name, u.last_name, u.email, 
         u.status, GROUP_CONCAT(r.role_name) as roles, q.code_value AS qr_code
         FROM users u
         LEFT JOIN user_roles ur ON u.user_id = ur.user_id
         LEFT JOIN roles r ON ur.role_id = r.role_id
         LEFT JOIN qr_codes q ON q.code_type='faculty' AND q.ref_id=u.user_id
         GROUP BY u.user_id
         ORDER BY u.user_id ASC

POST Requests with Actions:

1. action: "create" - User Creation
   Required Fields: employee_id, first_name, last_name, email, password, roles
   Security: Role-based restrictions (secretaries can only create 'program head' or 'faculty' users)
   
   Process:
   1. Validate required fields using validateRequiredFields()
   2. Check user permissions based on current user's roles
   3. If secretary, restrict role creation to 'program head' and 'faculty' only
   4. Hash password using password_hash($input['password'], PASSWORD_DEFAULT)
   5. Insert user into users table:
      INSERT INTO users(employee_id,first_name,last_name,email,password_hash,status)
      VALUES(:emp,:fn,:ln,:em,:pw,'active')
   6. Get the new user's ID using $db->lastInsertId()
   7. Insert role assignments into user_roles table:
      INSERT INTO user_roles(user_id, role_id) VALUES (:user_id, :role_id)
   8. Return success response

2. action: "update" - User Updates
   Required Fields: user_id, employee_id, first_name, last_name, email, roles
   Security: Only admin and dean can update users
   
   Process:
   1. Validate required fields
   2. Check authorization (admin/dean only)
   3. Update user information in users table
   4. Delete existing role assignments: DELETE FROM user_roles WHERE user_id=:id
   5. Insert new role assignments
   6. Return success response

3. action: "toggle" - Status Toggle
   Toggles user status between active/inactive
   Process:
   1. Update users table: UPDATE users SET status = CASE WHEN status='active' 
      THEN 'inactive' ELSE 'active' END WHERE user_id=:id
   2. Return success response

SUPPORTING ENDPOINTS
====================

/api/roles/roles.php
- Fetches available roles for the UI
- Returns: {"success": true, "roles": [{"role_id": 1, "role_name": "admin"}, ...]}
- Access: Requires admin, dean, or secretary role

/api/admin/admin.php
- Admin-specific user management (legacy system)
- Handles user listing, role updates, and status toggles
- Access: Admin only

/api/auth/auth.php
- Authentication and session management
- Handles login/logout functionality
- Sets session variables: $_SESSION['uid'] and $_SESSION['roles']

FRONTEND IMPLEMENTATION
=======================

User Interface Components:

1. User List View (faculties.html):
   - Displays users in a responsive Bootstrap table
   - Shows: ID, Employee ID, Name, Email, Status, Roles, Actions
   - Role-based action visibility (only admin/dean can edit)
   - Status badges with color coding (green for active, gray for inactive)
   - Role badges displayed as info-colored badges

2. Add User Modal:
   - Form fields: Employee ID, First Name, Last Name, Email, Password, Roles
   - Dynamic role checkboxes based on current user's permissions
   - Secretary users see limited role options (program head, faculty only)
   - Form validation with required field indicators
   - Bootstrap modal with responsive design

3. Edit User Modal:
   - Pre-populated form with existing user data
   - Role selection with current roles pre-selected
   - Optional password field for updates
   - Same validation as add user form

JavaScript Flow (faculties.js):
==============================

1. fetchRoles() - Loads available roles from /api/roles/roles.php
   - Stores roles in allRoles array
   - Populates role checkboxes for both add and edit modals
   - Applies role restrictions for secretary users

2. loadUsers() - Displays current users
   - Fetches user data from /api/faculties/faculties.php
   - Renders users in table format
   - Applies role-based UI restrictions
   - Handles empty state display

3. Form submission handlers:
   - addUserForm - Creates new users via POST to /api/faculties/faculties.php
   - editUserForm - Updates existing users via POST to /api/faculties/faculties.php
   - Both handle success/error responses and UI updates

4. toggleUserStatus() - Changes user active/inactive status
   - Sends POST request with action: "toggle"
   - Updates UI after successful response

5. editUser() - Opens edit modal with pre-populated data
   - Sets form field values
   - Selects current user roles in checkboxes
   - Shows edit modal

SECURITY & ACCESS CONTROL
=========================

Authentication Layer (config/security.php):
- requireAuth() function checks for valid session
- Role-based authorization with requireAuth($db, ['admin', 'dean', 'secretary'])
- Session management for user ID and roles
- Input sanitization using sanitize() function

Permission System:
- Admin/Dean: Full user management capabilities (create, read, update, delete)
- Secretary: Limited to creating 'program head' and 'faculty' users only
- Other roles: Read-only access to user lists
- Role restrictions enforced both client-side and server-side

Data Validation:
- Server-side validation of required fields using validateRequiredFields()
- Input sanitization using sanitize() function
- SQL injection prevention with prepared statements
- Password strength handled by PHP's built-in hashing
- Email format validation
- Unique constraint enforcement for employee_id and email

COMPLETE USER ADDITION FLOW
===========================

Step-by-Step Process:

1. User Authentication:
   - User logs in via /api/auth/auth.php
   - Session established with user ID and roles
   - Access control checks performed

2. UI Initialization:
   - User navigates to faculties management page
   - JavaScript loads available roles from /api/roles/roles.php
   - Role checkboxes populated based on user permissions
   - Existing users loaded and displayed

3. User Creation Process:
   a. User clicks "Add New User" button
   b. Modal opens with form fields
   c. JavaScript fetches available roles based on current user's permissions
   d. User fills form and selects roles
   e. Form submission triggers POST to /api/faculties/faculties.php
   f. Server validates permissions and required fields
   g. Password is hashed using PHP's password_hash()
   h. User record inserted into users table
   i. Role assignments inserted into user_roles table
   j. Success response triggers UI refresh
   k. User list updates to show new user

4. Error Handling:
   - Client-side validation for required fields
   - Server-side validation with detailed error messages
   - User feedback via alerts and form highlighting
   - Graceful handling of network errors

KEY FEATURES & BENEFITS
=======================

1. Flexible Role System:
   - Many-to-many relationship allows users to have multiple roles
   - Easy to add new roles without code changes
   - Granular permission control

2. Security First:
   - Password hashing using industry-standard methods
   - Input validation and sanitization
   - Role-based access control
   - SQL injection prevention

3. User-Friendly Interface:
   - Modal-based forms with real-time validation
   - Responsive Bootstrap design
   - Clear visual feedback for user actions
   - Intuitive role selection

4. Audit Trail Ready:
   - Database structure supports activity logging
   - User actions can be tracked
   - Timestamp fields for creation and updates

5. Scalable Architecture:
   - Clean separation between frontend and backend
   - RESTful API design
   - Modular JavaScript components
   - Easy to extend and maintain

TECHNICAL IMPLEMENTATION DETAILS
================================

Frontend Technologies:
- HTML5 with Bootstrap 5.3.2
- Vanilla JavaScript (ES6+)
- CSS3 with custom styling
- Font Awesome icons
- Responsive design principles

Backend Technologies:
- PHP 7.4+ with PDO
- MySQL database
- Session-based authentication
- RESTful API design
- Prepared statements for security

File Structure:
- /api/faculties/faculties.php - Main user management API
- /api/roles/roles.php - Role management API
- /api/auth/auth.php - Authentication API
- /config/security.php - Security utilities
- /public/modules/faculties/faculties.html - User interface
- /public/modules/faculties/faculties.js - Frontend logic
- /database_setup.sql - Database schema
- /migration_user_roles.sql - Role system migration

TESTING CREDENTIALS
===================

Default Admin User:
- Email: admin@crmfms.local
- Password: admin123
- Roles: admin

Additional Test Users:
- Sarah Johnson: sarah.johnson@crmfms.local / admin123
- Michael Chen: michael.chen@crmfms.local / admin123

CONCLUSION
==========

This user addition system provides a robust, secure, and user-friendly foundation 
for user management in the CRM/FMS application. The implementation follows best 
practices for security, usability, and maintainability, with proper separation of 
concerns between the frontend presentation layer and backend business logic.

The system is designed to be easily extensible, allowing for future enhancements 
such as additional role types, more granular permissions, and advanced user 
management features.
